// lib/services/scraper/manager.ts
import { DomestikaScraper } from "./platforms/domestika";

// Configuration for job filtering
const SCRAPER_CONFIG = {
  roles: [
    // English roles
    "ux",
    "ui",
    "user experience",
    "user interface",
    "product designer",
    "product design",
    "interaction designer",
    "interaction design",
    "ux/ui",
    "ui/ux",
    // Spanish roles
    "diseÃ±ador de producto",
    "diseÃ±ador ux",
    "diseÃ±ador ui",
    "experiencia de usuario",
    "interfaz de usuario",
    "diseÃ±o de producto",
    "diseÃ±ador de experiencia",
    "diseÃ±ador de interfaz",
    "diseÃ±ador digital",
    "diseÃ±o de aplicaciones",
    "diseÃ±o web",
  ],
  locations: [
    // Countries
    "espaÃ±a",
    "spain",
    "remote",
    "remoto",
    // Cities
    "madrid",
    "barcelona",
    "valencia",
    "sevilla",
    "bilbao",
    "mÃ¡laga",
    "zaragoza",
    // Work types
    "hÃ­brido",
    "hybrid",
    "teletrabajo",
    "en remoto",
  ],
  allowRemote: true,
};

// Create scraper instances
const scrapers = [
  new DomestikaScraper(SCRAPER_CONFIG),
  // Add more scrapers here as we implement them
];

export async function runScrapers() {
  console.log("ðŸ¤– Starting job scrapers...");

  const results = await Promise.allSettled(scrapers.map((scraper) => scraper.run()));

  // Log results
  const successful = results.filter((r) => r.status === "fulfilled").length;
  const failed = results.filter((r) => r.status === "rejected").length;

  console.log("\nðŸ“Š Scraping summary:");
  console.log(`âœ“ Successful: ${successful}`);
  console.log(`âœ— Failed: ${failed}`);

  if (failed > 0) {
    const errors = results.filter((r): r is PromiseRejectedResult => r.status === "rejected").map((r) => r.reason);
    console.error("\nErrors:", errors);
  }
}
